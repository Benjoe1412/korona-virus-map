{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["circleOptions","strokeColor","labelAnchor","x","y","labelStyle","backgroundColor","color","textAlign","fontSize","padding","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","transform","maxWidth","MyMapComponent","withScriptjs","withGoogleMap","props","mapRef","useRef","useState","zoom","setZoom","bounds","setBounds","handleRef","useCallback","ref","current","handleZoom","getZoom","handleBounds","getBounds","onZoomChanged","onBoundsChanged","defaultZoom","defaultCenter","lat","lng","locations","map","location","id","coords","state","country","confirmed","deaths","recovered","name","trim","inBounds","contains","inBoundsAndZoom","center","radius","Math","log","options","position","icon","style","fontWeight","App","setLocations","timeSeries","setTimeSeries","useEffect","fetch","then","res","json","locationsGrouped","forEach","latitude","longitude","newLocations","Object","values","filter","playIndex","setPlayIndex","handlePlayClick","interval","setInterval","prev","length","clearInterval","className","top","left","zIndex","onClick","googleMapURL","loadingElement","height","containerElement","mapElement","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5be32dee.chunk.js","sourcesContent":["\n/* globals google*/\nimport React, { useState, useCallback, useEffect,Fragment, useRef } from 'react';\nimport './App.css';\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, Circle } from \"react-google-maps\"\nimport MarkerWithLabel from \"react-google-maps/lib/components/addons/MarkerWithLabel\";\nconst circleOptions = { strokeColor: '#f44336'}\nconst labelAnchor = {x:0 , y:0}\nconst labelStyle = {\n  backgroundColor: \"rgba(244,67,54,0.75)\",\n  color: 'white',\n  textAlign: 'center',\n  fontSize: \"20px\", \n  padding: \"32px 32px\",\n  borderTopLeftRadius: '100%',\n  borderTopRightRadius: '100%',\n  borderBottomRightRadius: '100%',\n  transform: 'translateY(-100%)',\n  maxWidth: '200px'\n  \n}\n\n\nconst MyMapComponent = withScriptjs(withGoogleMap((props) =>{\n\n  const mapRef = useRef(null)\n  const [ zoom, setZoom ] = useState(3)\n  const [ bounds, setBounds ] = useState(null)\n\n  const handleRef = useCallback(ref => {\nmapRef.current = ref\n\n  }, [])\n\n  const handleZoom = useCallback( () => {\n      if(mapRef.current){\n        setZoom(mapRef.current.getZoom())\n      }\n\n  }, [] )\n\n  const handleBounds = useCallback( () => {\n    if(mapRef.current){\n      setBounds(mapRef.current.getBounds())\n    }\n\n}, [] )\n\n\n\n\n\n\n  return(\n  <GoogleMap\n  ref={handleRef}\n  onZoomChanged ={handleZoom}\n  onBoundsChanged={handleBounds}\n\n\n    defaultZoom={3}\n    defaultCenter={{ lat: 47.1430185, lng: 17.26265 }}\n  >\n    {props.locations.map(location => {\n\n      const { id,coords , state, country, confirmed, deaths, recovered} = location;\n      const name = `${state} ${country}`.trim()\n     \n      const inBounds = bounds && bounds.contains(coords)\n      const inBoundsAndZoom = zoom > 6 && inBounds\n      return (\n        <Fragment key={id}>\n          { inBounds && confirmed > 0 && <Circle \n          \n            center={coords} \n            radius={Math.log(confirmed) * 10000}\n            options={circleOptions}\n          />\n          }\n\n          {inBoundsAndZoom && (confirmed > 0 || deaths > 0 || recovered > 0) && <MarkerWithLabel\n          \n              position={coords}\n              labelAnchor={labelAnchor}\n              labelStyle={labelStyle}\n              icon=' '\n            >\n              <div><span style={{ fontSize: '1.2em', fontWeight: 'bold'}}>{name}</span><br /><br/>Confirmed: {confirmed} <br/>Deaths: {deaths}<br/>Recovered: {recovered}</div>\n            </MarkerWithLabel>\n    }\n        </Fragment>\n)\n    })}\n    \n  </GoogleMap>\n  )\n  }))\n\n\nfunction App() {\n  const [ locations, setLocations] = useState([])\n  const [timeSeries, setTimeSeries] = useState([])\n//fetch('https://benjoe1412.github.io:8000/korona-virus-api/data')\n  useEffect(()=> {\n    fetch('https://benjoe1412.github.io:8000/korona-virus-api/data')\n    .then(res => res.json())\n    .then(locations => { \n      const locationsGrouped = {};\n      locations.forEach(location => {\n        const id = `${location.state} ${location.country}`  \n        const coords = {lat: location.latitude, lng: location.longitude}\n        if(locationsGrouped[id]){\n          locationsGrouped[id] = {\n            ...locationsGrouped[id],\n            confirmed: locationsGrouped[id].confirmed + location.confirmed,\n            deaths: locationsGrouped[id].deaths + location.deaths,\n            recovered: locationsGrouped[id].recovered + location.recovered,\n          }\n        }else{\n          locationsGrouped[id] = location\n          locationsGrouped[id].id = id\n          locationsGrouped[id].coords = coords\n        }\n      });\n\n      const newLocations = Object.values(locationsGrouped).filter(({ latitude, longitude}) => latitude && longitude)\n      setLocations(newLocations)\n    })\n  }, [])\n// fetch('https://benjoe1412.github.io/korona-virus-api/time-series')\n  useEffect(()=> {\n    fetch('https://benjoe1412.github.io:8000/korona-virus-api/time-series')\n    .then(res => res.json())\n    .then(locations => { \n\n      const newLocations = Object.values(locations).filter(({ latitude, longitude}) => latitude && longitude)\n      setTimeSeries(newLocations)\n    })\n  }, [])\nconst [playIndex, setPlayIndex] = useState(-1);\n\n\nuseEffect(() => {\nif(playIndex < 0){\n  return;\n}\nsetLocations(timeSeries.map(location => ({\n  ...location,\n  coords: {lat: location.latitude, lng: location.longitude},\n  confirmed: location.confirmed[playIndex],\n  deaths: location.deaths[playIndex],\n  recovered: location.recovered[playIndex]\n})))\n\n})\n  const handlePlayClick = useCallback(() => {\n    if(playIndex !== -1){\n      return;\n    }\n   const interval =  setInterval(() => {\n      setPlayIndex(prev => {\n        if(prev === timeSeries[0].confirmed.length -1){\n          clearInterval(interval);\n          return -1;\n        }\n       return prev +1;\n      });\n    }, 10)\n      \n  }, [timeSeries, playIndex]);\n\n  return (\n    <div className=\"App\">\n      <button style= {{padding: '8px 16px', position: 'absolute', top: 0, left: 0, zIndex: 10000}} onClick={handlePlayClick} >Play</button>\n        <MyMapComponent\n          locations={locations}\n          googleMapURL=\"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places\"\n          loadingElement={<div style={{ height: `100%` }} />}\n          containerElement={<div style={{ height: `100vh` }} />}\n          mapElement={<div style={{ height: `100%` }} />}\n        />\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}